(function() {
  var Directory, Emitter, File, Watcher, path, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('pathwatcher'), File = _ref.File, Directory = _ref.Directory;

  Emitter = require('atom').Emitter;

  path = require('path');

  module.exports = Watcher = (function() {
    function Watcher() {
      this.destroy = __bind(this.destroy, this);
      this.emitter = new Emitter;
      this.entities = [];
    }

    Watcher.prototype.onDidDestroy = function(callback) {
      return this.emitter.on('did-destroy', callback);
    };

    Watcher.prototype.onDidChangeGlobals = function(callback) {
      return this.emitter.on('did-change-globals', callback);
    };

    Watcher.prototype.destroy = function() {
      this.unwatch();
      this.entities = null;
      this.emitter.emit('did-destroy');
      return this.emitter.dispose();
    };

    Watcher.prototype.watch = function() {};

    Watcher.prototype.unwatch = function() {
      var entity, _i, _len, _ref1, _results;
      if (!this.entities) {
        return;
      }
      _ref1 = this.entities;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entity = _ref1[_i];
        _results.push(entity.off('.dev-live-reload'));
      }
      return _results;
    };

    Watcher.prototype.loadStylesheet = function(stylesheetPath) {};

    Watcher.prototype.loadAllStylesheets = function() {};

    Watcher.prototype.emitGlobalsChanged = function() {
      return this.emitter.emit('did-change-globals');
    };

    Watcher.prototype.watchDirectory = function(directoryPath) {
      var entity;
      entity = new Directory(directoryPath);
      entity.on('contents-changed.dev-live-reload', (function(_this) {
        return function() {
          return _this.loadAllStylesheets();
        };
      })(this));
      return this.entities.push(entity);
    };

    Watcher.prototype.watchGlobalFile = function(filePath) {
      var entity;
      entity = new File(filePath);
      entity.on('contents-changed.dev-live-reload', (function(_this) {
        return function() {
          return _this.emitGlobalsChanged();
        };
      })(this));
      return this.entities.push(entity);
    };

    Watcher.prototype.watchFile = function(filePath) {
      var entity, reloadFn;
      reloadFn = (function(_this) {
        return function() {
          return _this.loadStylesheet(entity.getPath());
        };
      })(this);
      entity = new File(filePath);
      entity.on('contents-changed.dev-live-reload', reloadFn);
      entity.on('removed.dev-live-reload', reloadFn);
      entity.on('moved.dev-live-reload', reloadFn);
      return this.entities.push(entity);
    };

    return Watcher;

  })();

}).call(this);

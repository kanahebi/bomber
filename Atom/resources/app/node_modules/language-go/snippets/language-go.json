{
  ".source.go": {
    "import": {
      "prefix": "im",
      "body": "import \"${1:fmt}\""
    },
    "func": {
      "prefix": "func",
      "body": "func $1($2) $3 {\n\t$0\n}"
    },
    "main": {
      "prefix": "main",
      "body": "func main() {\n\t$1\n}"
    },
    "var": {
      "prefix": "var",
      "body": "var ${1:ok} ${2:bool}$0"
    },
    "switch": {
      "prefix": "switch",
      "body": "switch ${1:var} {\ncase ${2:cond}:\n\t$0\n}"
    },
    "Import": {
      "prefix": "Im",
      "body": "import (\n\t\"${1:fmt}\"\n)$0"
    },
    "type interface": {
      "prefix": "tyi",
      "body": "type ${1:Name} interface {\n\t$0\n}"
    },
    "type struct": {
      "prefix": "tys",
      "body": "type ${1:Name} struct {\n\t$0\n}"
    },
    "for range": {
      "prefix": "forr",
      "body": "for ${1:index}, ${2:item} := range ${3:list} {\n\t$0\n}"
    },
    "if err != nil": {
      "prefix": "iferr",
      "body": "if err != nil {\n\t${1:return}\n}"
    },
    "channel": {
      "prefix": "ch",
      "body": "chan ${0:int}"
    },
    "case": {
      "prefix": "cs",
      "body": "case ${1:value}:$0"
    },
    "const": {
      "prefix": "c",
      "body": "const ${1:NAME} = ${0:0}"
    },
    "defer": {
      "prefix": "df",
      "body": "defer ${0:func}()"
    },
    "interface": {
      "prefix": "in",
      "body": "interface{}"
    },
    "if": {
      "prefix": "if",
      "body": "if ${1:condition} {\n\t$2\n}"
    },
    "else": {
      "prefix": "el",
      "body": "else {\n\t$1\n}"
    },
    "if else": {
      "prefix": "ie",
      "body": "if ${1:condition} {\n\t$2\n} else {\n\t$3\n}\n$0"
    },
    "for": {
      "prefix": "for",
      "body": "for ${2:index} := 0; $2 < ${1:count}; $2${3:++} {\n\t$4\n}\n$0"
    },
    "fmt println": {
      "prefix": "fp",
      "body": "fmt.Println(\"$1\")$0"
    },
    "log println": {
      "prefix": "lp",
      "body": "log.Println(\"$1\")$0"
    },
    "make": {
      "prefix": "make",
      "body": "make(${1:[]string}, ${0:0})"
    },
    "map": {
      "prefix": "map",
      "body": "map[${1:string}]${0:int}"
    },
    "new": {
      "prefix": "new",
      "body": "new(${0:type})"
    },
    "panic": {
      "prefix": "pn",
      "body": "panic(\"${0:message}\")"
    },
    "http responsewriter request": {
      "prefix": "wr",
      "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request"
    },
    "handlerfunc": {
      "prefix": "hf",
      "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})\n"
    },
    "handler": {
      "prefix": "hand",
      "body": "func ${1:nameHandler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}"
    },
    "http redirect": {
      "prefix": "rd",
      "body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})"
    },
    "http error": {
      "prefix": "herr",
      "body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})"
    },
    "listenandserve": {
      "prefix": "las",
      "body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})"
    },
    "serve": {
      "prefix": "sv",
      "body": "http.Serve(\"${1::8080}\", ${2:nil})"
    },
    "goroutine": {
      "prefix": "go",
      "body": "go func($1) {\n\t$2\n}($3)"
    },
    "goroutine function": {
      "prefix": "gf",
      "body": "go ${1:func}($0)"
    }
  }
}

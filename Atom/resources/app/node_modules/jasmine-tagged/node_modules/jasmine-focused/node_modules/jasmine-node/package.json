{
  "name": "jasmine-node",
  "version": "1.10.2",
  "description": "DOM-less simple JavaScript BDD testing framework for Node",
  "contributors": [
    {
      "name": "Chris Moultrie",
      "email": "chris@moultrie.org"
    }
  ],
  "homepage": "https://github.com/mhevery/jasmine-node",
  "repository": {
    "type": "git",
    "url": "https://github.com/mhevery/jasmine-node.git"
  },
  "keywords": [
    "testing",
    "bdd"
  ],
  "author": {
    "name": "Misko Hevery",
    "email": "misko@hevery.com"
  },
  "maintainers": [
    {
      "name": "Martin HÃ¤ger",
      "email": "martin.haeger@gmail.com"
    },
    {
      "name": "Chris Moultrie",
      "email": "chris@moultrie.org"
    }
  ],
  "licenses": [
    "MIT"
  ],
  "dependencies": {
    "coffee-script": ">=1.0.1",
    "jasmine-reporters": ">=0.2.0",
    "requirejs": ">=0.27.1",
    "walkdir": ">= 0.0.1",
    "underscore": ">= 1.3.1",
    "gaze": "~0.3.2",
    "mkdirp": "~0.3.5",
    "coffeestack": ">=1 <2"
  },
  "bin": {
    "jasmine-node": "bin/jasmine-node"
  },
  "preferGlobal": true,
  "main": "lib/jasmine-node",
  "scripts": {
    "test": "node lib/jasmine-node/cli.js spec"
  },
  "devDependencies": {},
  "gitHead": "81af4f953a2b7dfb5bde8331c05362a4b464c5ef",
  "readme": "jasmine-node\r\n======\r\n\r\n[![Build Status](https://secure.travis-ci.org/spaghetticode/jasmine-node.png)](http://travis-ci.org/spaghetticode/jasmine-node)\r\n\r\nThis node.js module makes the wonderful Pivotal Lab's jasmine\r\n(http://github.com/pivotal/jasmine) spec framework available in\r\nnode.js.\r\n\r\njasmine\r\n-------\r\n\r\nVersion 1.3.1 of Jasmine is currently included with node-jasmine.\r\n\r\nwhat's new\r\n----------\r\n*  Ability to test specs written in Literate Coffee-Script\r\n*  Teamcity Reporter reinstated.\r\n*  Ability to specify multiple files to test via list in command line\r\n*  Ability to suppress stack trace with <code>--noStack</code>\r\n*  Async tests now run in the expected context instead of the global one\r\n*  --config flag that allows you to assign variables to process.env\r\n*  Terminal Reporters are now available in the Jasmine Object #184\r\n*  Done is now available in all timeout specs #199\r\n*  <code>afterEach</code> is available in requirejs #179\r\n*  Editors that replace instead of changing files should work with autotest #198\r\n*  Jasmine Mock Clock now works!\r\n*  Autotest now works!\r\n*  Using the latest Jasmine!\r\n*  Verbose mode tabs <code>describe</code> blocks much more accurately!\r\n*  --coffee now allows specs written in Literate CoffeeScript (.litcoffee)\r\n\r\ninstall\r\n------\r\n\r\nTo install the latest official version, use NPM:\r\n\r\n    npm install jasmine-node -g\r\n\r\nTo install the latest _bleeding edge_ version, clone this repository and check\r\nout the `beta` branch.\r\n\r\nusage\r\n------\r\n\r\nWrite the specifications for your code in \\*.js and \\*.coffee files in the\r\nspec/ directory (note: your specification files must end with either\r\n.spec.js, .spec.coffee or .spec.litcoffee; otherwise jasmine-node won't find them!). You can use sub-directories to better organise your specs.\r\n\r\nIf you have installed the npm package, you can run it with:\r\n\r\n    jasmine-node spec/\r\n\r\nIf you aren't using npm, you should add `pwd`/lib to the $NODE_PATH\r\nenvironment variable, then run:\r\n\r\n    node lib/jasmine-node/cli.js\r\n\r\n\r\nYou can supply the following arguments:\r\n\r\n  * <code>--autotest</code>, provides automatic execution of specs after each change\r\n  * <code>--watch</code>, when used with <code>--autotest</code>, paths after <code>--watch</code> will be \r\nwatched for changes, allowing to watch for changes outside of specs directory\r\n  * <code>--coffee</code>, allow execution of .coffee and .litcoffee specs\r\n  * <code>--color</code>, indicates spec output should uses color to\r\nindicates passing (green) or failing (red) specs\r\n  * <code>--noColor</code>, do not use color in the output\r\n  * <code>-m, --match REGEXP</code>, match only specs comtaining \"REGEXPspec\"\r\n  * <code>--matchall</code>, relax requirement of \"spec\" in spec file names\r\n  * <code>--verbose</code>, verbose output as the specs are run\r\n  * <code>--junitreport</code>, export tests results as junitreport xml format\r\n  * <code>--output FOLDER</code>, defines the output folder for junitreport files\r\n  * <code>--teamcity</code>, converts all console output to teamcity custom test runner commands. (Normally auto detected.)\r\n  * <code>--runWithRequireJs</code>, loads all specs using requirejs instead of node's native require method\r\n  * <code>--requireJsSetup</code>, file run before specs to include and configure RequireJS\r\n  * <code>--test-dir</code>, the absolute root directory path where tests are located\r\n  * <code>--nohelpers</code>, does not load helpers\r\n  * <code>--forceexit</code>, force exit once tests complete\r\n  * <code>--captureExceptions</code>, listen to global exceptions, report them and exit (interferes with Domains in NodeJs, so do not use if using Domains as well\r\n  * <code>--config NAME VALUE</code>, set a global variable in process.env\r\n  * <code>--noStack</code>, suppress the stack trace generated from a test failure\r\n\r\nIndividual files to test can be added as bare arguments to the end of the args.\r\n\r\nExample:\r\n\r\n`jasmine-node --coffee spec/AsyncSpec.coffee spec/CoffeeSpec.coffee spec/SampleSpecs.js`\r\n\r\nasync tests\r\n-----------\r\n\r\njasmine-node includes an alternate syntax for writing asynchronous tests. Accepting\r\na done callback in the specification will trigger jasmine-node to run the test\r\nasynchronously waiting until the done() callback is called.\r\n\r\n```javascript\r\n    var request = require('request');\r\n\r\n    it(\"should respond with hello world\", function(done) {\r\n      request(\"http://localhost:3000/hello\", function(error, response, body){\r\n        expect(body).toEqual(\"hello world\");\r\n        done();\r\n      });\r\n    });\r\n```\r\n\r\nAn asynchronous test will fail after 5000 ms if done() is not called. This timeout\r\ncan be changed by setting `jasmine.getEnv().defaultTimeoutInterval` or by passing a timeout\r\ninterval in the specification.\r\n\r\n```javascript\r\n    var request = require('request');\r\n\r\n    it(\"should respond with hello world\", function(done) {\r\n      request(\"http://localhost:3000/hello\", function(error, response, body){\r\n        done();\r\n      }, 250);  // timeout after 250 ms\r\n    });\r\n```\r\n\r\nor\r\n\r\n```javascript\r\n    var request = require('request');\r\n\r\n    jasmine.getEnv().defaultTimeoutInterval = 500;\r\n    \r\n    it(\"should respond with hello world\", function(done) {\r\n      request(\"http://localhost:3000/hello\", function(error, response, body){\r\n        done();\r\n      });  // timeout after 500 ms\r\n    });\r\n```\r\n\r\nCheckout spec/SampleSpecs.js to see how to use it.\r\n\r\n\r\nrequirejs\r\n---------\r\n\r\nThere is a sample project in `/spec-requirejs`. It is comprised of:\r\n\r\n1.  `requirejs-setup.js`, this pulls in our wrapper template (next)\r\n1.  `requirejs-wrapper-template`, this builds up requirejs settings\r\n1.  `requirejs.sut.js`, this is a __SU__bject To __T__est, something required by requirejs\r\n1.  `requirejs.spec.js`, the actual jasmine spec for testing\r\n\r\nTo run it:\r\n\r\n    node lib/jasmine-node/cli.js --runWithRequireJs --requireJsSetup ./spec-requirejs/requirejs-setup.js ./spec-requirejs/\r\n\r\nexceptions\r\n----------\r\n\r\nOften you'll want to capture an uncaught exception and log it to the console,\r\nthis is accomplished by using the `--captureExceptions` flag. Exceptions will\r\nbe reported to the console, but jasmine-node will attempt to recover and\r\ncontinue. It was decided to not change the current functionality until 2.0. So,\r\nuntil then, jasmine-node will still return 0 and continue on without this flag.\r\n\r\n### Scenario ###\r\n\r\nYou require a module, but it doesn't exist, ie `require('Q')` instead of\r\n`require('q')`. Jasmine-Node reports the error to the console, but carries on\r\nand returns 0. This messes up Travis-CI because you need it to return a\r\nnon-zero status while doing CI tests.\r\n\r\n### Mitigation ###\r\n\r\nBefore `--captureExceptions`\r\n\r\n```sh\r\n> jasmine-node --coffee spec\r\n> echo $status\r\n0\r\n```\r\n\r\nRun jasmine node with the `--captureExceptions` flag.\r\n\r\n```sh\r\n> jasmine-node --coffee --captureExceptions spec\r\n> echo $status\r\n1\r\n```\r\n\r\n\r\ndevelopment\r\n-----------\r\n\r\nInstall the dependent packages by running:\r\n\r\n    npm install\r\n\r\nRun the specs before you send your pull request:\r\n\r\n    specs.sh\r\n\r\n__Note:__ Some tests are designed to fail in the specs.sh. After each of the\r\nindividual runs completes, there is a line that lists what the expected\r\nPass/Assert/Fail count should be. If you add/remove/edit tests, please be sure\r\nto update this with your PR.\r\n\r\n\r\nchangelog\r\n---------\r\n\r\n*  _1.10.2 - Restored stack filter which was accidentally removed (thanks to\r\n   [kevinsawicki](https://github.com/kevinsawicki))_\r\n*  _1.10.1 - `beforeEach` and `afterEach` now properly handle the async-timeout function_\r\n*  _1.10.0 - Skipped tests now show in the terminal reporter's output (thanks\r\n   to [kevinsawicki](https://github.com/kevinsawicki))_\r\n*  _1.9.1 - Timeout now consistent between Async and Non-Async Calls (thanks to\r\n   [codemnky](https://github.com/codemnky))_\r\n*  _1.9.0 - Now re-throwing the file-not-found error, added info to README.md,\r\n   printing version with `--version`_\r\n*  _1.8.1 - Fixed silent failure due to invalid REGEX (thanks to\r\n   [pimterry](https://github.com/pimterry))_\r\n*  _1.8.0 - Fixed bug in autotest with multiple paths and added --watch feature\r\n    (thanks to [davegb3](https://github.com/davegb3))_\r\n*  _1.7.1 - Removed unneeded fs dependency (thanks to\r\n   [kevinsawicki](https://github.com/kevinsawicki)) Fixed broken fs call in\r\n   node 0.6 (thanks to [abe33](https://github.com/abe33))_\r\n*  _1.7.0 - Literate Coffee-Script now testable (thanks to [magicmoose](https://github.com/magicmoose))_\r\n*  _1.6.0 - Teamcity Reporter Reinstated (thanks to [bhcleek](https://github.com/bhcleek))_\r\n*  _1.5.1 - Missing files and require exceptions will now report instead of failing silently_\r\n*  _1.5.0 - Now takes multiple files for execution. (thanks to [abe33](https://github.com/abe33))_\r\n*  _1.4.0 - Optional flag to suppress stack trace on test failure (thanks to [Lastalas](https://github.com/Lastalas))_\r\n*  _1.3.1 - Fixed context for async tests (thanks to [omryn](https://github.com/omryn))_\r\n*  _1.3.0 - Added --config flag for changeable testing environments_\r\n*  _1.2.3 - Fixed #179, #184, #198, #199. Fixes autotest, afterEach in requirejs, terminal reporter is in jasmine object, done function missing in async tests_\r\n*  _1.2.2 - Revert Exception Capturing to avoid Breaking Domain Tests_\r\n*  _1.2.1 - Emergency fix for path reference missing_\r\n*  _1.2.0 - Fixed #149, #152, #171, #181, #195. --autotest now works as expected, jasmine clock now responds to the fake ticking as requested, and removed the path.exists warning_\r\n*  _1.1.1 - Fixed #173, #169 (Blocks were not indented in verbose properly, added more documentation to address #180_\r\n*  _1.1.0 - Updated Jasmine to 1.3.1, fixed fs missing, catching uncaught exceptions, other fixes_\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mhevery/jasmine-node/issues"
  },
  "_id": "jasmine-node@1.10.2",
  "_shasum": "b2c2414ed83434652268925a124ee8a069c331f8",
  "_from": "C:\\Users\\jenkins\\AppData\\Local\\Temp\\1\\npm-13192-529f9c48\\git-cache-3faa21a94136\\81af4f953a2b7dfb5bde8331c05362a4b464c5ef",
  "_resolved": "git+https://github.com/kevinsawicki/jasmine-node.git#81af4f953a2b7dfb5bde8331c05362a4b464c5ef"
}

(function() {
  var InstalledPackageView, PackageManager, path;

  path = require('path');

  InstalledPackageView = require('../lib/installed-package-view');

  PackageManager = require('../lib/package-manager');

  describe("InstalledPackageView", function() {
    it("displays the grammars registered by the package", function() {
      var settingsPanels;
      settingsPanels = null;
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        return settingsPanels = view.find('.package-grammars .settings-panel');
      });
      waitsFor(function() {
        return settingsPanels.children().length === 2;
      });
      return runs(function() {
        expect(settingsPanels.eq(0).find('.grammar-scope').text()).toBe('Scope: source.a');
        expect(settingsPanels.eq(0).find('.grammar-filetypes').text()).toBe('File Types: .a, .aa, a');
        expect(settingsPanels.eq(1).find('.grammar-scope').text()).toBe('Scope: source.b');
        return expect(settingsPanels.eq(1).find('.grammar-filetypes').text()).toBe('File Types: ');
      });
    });
    it("displays the snippets registered by the package", function() {
      var snippetsTable;
      snippetsTable = null;
      waitsForPromise(function() {
        return atom.packages.activatePackage('snippets');
      });
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        return snippetsTable = view.find('.package-snippets-table tbody');
      });
      waitsFor(function() {
        return snippetsTable.children().length === 2;
      });
      return runs(function() {
        expect(snippetsTable.find('tr:eq(0) td:eq(0)').text()).toBe('b');
        expect(snippetsTable.find('tr:eq(0) td:eq(1)').text()).toBe('BAR');
        expect(snippetsTable.find('tr:eq(0) td:eq(2)').text()).toBe('bar?');
        expect(snippetsTable.find('tr:eq(1) td:eq(0)').text()).toBe('f');
        expect(snippetsTable.find('tr:eq(1) td:eq(1)').text()).toBe('FOO');
        return expect(snippetsTable.find('tr:eq(1) td:eq(2)').text()).toBe('foo!');
      });
    });
    return it("does not display keybindings from other platforms", function() {
      var keybindingsTable;
      keybindingsTable = null;
      waitsForPromise(function() {
        return atom.packages.activatePackage(path.join(__dirname, 'fixtures', 'language-test'));
      });
      return runs(function() {
        var pack, view;
        pack = atom.packages.getActivePackage('language-test');
        view = new InstalledPackageView(pack, new PackageManager());
        keybindingsTable = view.find('.package-keymap-table tbody');
        return expect(keybindingsTable.children().length).toBe(0);
      });
    });
  });

}).call(this);

(function() {
  var AvailablePackageView;

  AvailablePackageView = require('../lib/available-package-view');

  describe("AvailablePackageView", function() {
    var setPackageStatusSpies;
    setPackageStatusSpies = function(opts) {
      spyOn(AvailablePackageView.prototype, 'isInstalled').andReturn(opts.installed);
      return spyOn(AvailablePackageView.prototype, 'isDisabled').andReturn(opts.disabled);
    };
    beforeEach(function() {
      this.packageManager = jasmine.createSpyObj('packageManager', ['on', 'getClient', 'emit', 'install', 'uninstall']);
      return this.packageManager.getClient.andCallFake(function() {
        return jasmine.createSpyObj('client', ['avatar', 'package']);
      });
    });
    it("doesn't show the disable control for a theme", function() {
      var view;
      setPackageStatusSpies({
        installed: true,
        disabled: false
      });
      view = new AvailablePackageView({
        theme: 'syntax',
        name: 'test-theme'
      }, this.packageManager);
      return expect(view.enablementButton.css('display')).toBe('none');
    });
    it("can be disabled if installed", function() {
      var view;
      setPackageStatusSpies({
        installed: true,
        disabled: false
      });
      spyOn(atom.packages, 'disablePackage').andReturn(true);
      view = new AvailablePackageView({
        name: 'test-package'
      }, this.packageManager);
      expect(view.enablementButton.find('.disable-text').text()).toBe('Disable');
      view.enablementButton.click();
      return expect(atom.packages.disablePackage).toHaveBeenCalled();
    });
    it("can be uninstalled if installed", function() {
      var view;
      setPackageStatusSpies({
        installed: true,
        disabled: false
      });
      view = new AvailablePackageView({
        name: 'test-package'
      }, this.packageManager);
      expect(view.uninstallButton.css('display')).not.toBe('none');
      view.uninstallButton.click();
      return expect(this.packageManager.uninstall).toHaveBeenCalled();
    });
    return it("can be installed if currently not installed", function() {
      var view;
      setPackageStatusSpies({
        installed: false,
        disabled: false
      });
      view = new AvailablePackageView({
        name: 'test-package'
      }, this.packageManager);
      expect(view.installButton.css('display')).not.toBe('none');
      expect(view.uninstallButton.css('display')).toBe('none');
      view.installButton.click();
      return expect(this.packageManager.install).toHaveBeenCalled();
    });
  });

}).call(this);
